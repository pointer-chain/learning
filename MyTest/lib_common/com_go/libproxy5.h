/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 4 "main.go"

#include <stdlib.h> // 引入C标准库，用于内存管理

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// FreeCString 释放C语言字符串内存
// 参数 cs: 需要释放的C字符串指针
//
extern void FreeCString(char* cs);

// PostUrlWithProxy 通过代理发起HTTP请求的C导出函数
// 参数:
//
//	cMethod:          HTTP方法字符串指针 (C.char*)，仅接受GET/POST
//	cGetUrl:          目标URL字符串指针 (C.char*)
//	cHeaders:         JSON格式请求头字符串指针 (C.char*)
//	cProxyUrl:        代理地址字符串指针 (C.char*)，格式为scheme://host:port
//	cDisableRedirect: 禁用重定向标识指针 (C.char*)，"true"表示禁用
//
// 返回值:
//
//	*C.char: 返回JSON格式的响应数据指针，需使用FreeCString释放
//
// 安全注意事项:
//  1. 强制验证User-Agent头
//  2. 自动移除Authorization头
//  3. 限制响应体最大读取5MB
//  4. 白名单控制HTTP方法
//
extern char* PostUrlWithProxy(char* cMethod, char* cGetUrl, char* cHeaders, char* cProxyUrl, char* cDisableRedirect, char* cBody);

#ifdef __cplusplus
}
#endif
